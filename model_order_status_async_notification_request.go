/*
Reseller API

For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi.sdk.resellers

import (
	"encoding/json"
)

// checks if the OrderStatusAsyncNotificationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderStatusAsyncNotificationRequest{}

// OrderStatusAsyncNotificationRequest struct for OrderStatusAsyncNotificationRequest
type OrderStatusAsyncNotificationRequest struct {
	// Field for identifying whether it is a reseller or vendor event. For eg, resellers/orders
	Topic *string `json:"topic,omitempty"`
	// The event sent in the request. For eg, im::create.
	Event *string `json:"event,omitempty"`
	// The timestamp at which the event was sent.
	EventTimeStamp *string `json:"eventTimeStamp,omitempty"`
	// A unique id used as identifier for the sepcific event and used for generating the x-hub signature.
	EventId *string `json:"eventId,omitempty"`
	Resource []OrderStatusAsyncNotificationRequestResourceInner `json:"resource,omitempty"`
}

// NewOrderStatusAsyncNotificationRequest instantiates a new OrderStatusAsyncNotificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderStatusAsyncNotificationRequest() *OrderStatusAsyncNotificationRequest {
	this := OrderStatusAsyncNotificationRequest{}
	return &this
}

// NewOrderStatusAsyncNotificationRequestWithDefaults instantiates a new OrderStatusAsyncNotificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderStatusAsyncNotificationRequestWithDefaults() *OrderStatusAsyncNotificationRequest {
	this := OrderStatusAsyncNotificationRequest{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *OrderStatusAsyncNotificationRequest) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatusAsyncNotificationRequest) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *OrderStatusAsyncNotificationRequest) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *OrderStatusAsyncNotificationRequest) SetTopic(v string) {
	o.Topic = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *OrderStatusAsyncNotificationRequest) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatusAsyncNotificationRequest) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *OrderStatusAsyncNotificationRequest) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *OrderStatusAsyncNotificationRequest) SetEvent(v string) {
	o.Event = &v
}

// GetEventTimeStamp returns the EventTimeStamp field value if set, zero value otherwise.
func (o *OrderStatusAsyncNotificationRequest) GetEventTimeStamp() string {
	if o == nil || IsNil(o.EventTimeStamp) {
		var ret string
		return ret
	}
	return *o.EventTimeStamp
}

// GetEventTimeStampOk returns a tuple with the EventTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatusAsyncNotificationRequest) GetEventTimeStampOk() (*string, bool) {
	if o == nil || IsNil(o.EventTimeStamp) {
		return nil, false
	}
	return o.EventTimeStamp, true
}

// HasEventTimeStamp returns a boolean if a field has been set.
func (o *OrderStatusAsyncNotificationRequest) HasEventTimeStamp() bool {
	if o != nil && !IsNil(o.EventTimeStamp) {
		return true
	}

	return false
}

// SetEventTimeStamp gets a reference to the given string and assigns it to the EventTimeStamp field.
func (o *OrderStatusAsyncNotificationRequest) SetEventTimeStamp(v string) {
	o.EventTimeStamp = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *OrderStatusAsyncNotificationRequest) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatusAsyncNotificationRequest) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *OrderStatusAsyncNotificationRequest) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *OrderStatusAsyncNotificationRequest) SetEventId(v string) {
	o.EventId = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *OrderStatusAsyncNotificationRequest) GetResource() []OrderStatusAsyncNotificationRequestResourceInner {
	if o == nil || IsNil(o.Resource) {
		var ret []OrderStatusAsyncNotificationRequestResourceInner
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatusAsyncNotificationRequest) GetResourceOk() ([]OrderStatusAsyncNotificationRequestResourceInner, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *OrderStatusAsyncNotificationRequest) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given []OrderStatusAsyncNotificationRequestResourceInner and assigns it to the Resource field.
func (o *OrderStatusAsyncNotificationRequest) SetResource(v []OrderStatusAsyncNotificationRequestResourceInner) {
	o.Resource = v
}

func (o OrderStatusAsyncNotificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderStatusAsyncNotificationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EventTimeStamp) {
		toSerialize["eventTimeStamp"] = o.EventTimeStamp
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableOrderStatusAsyncNotificationRequest struct {
	value *OrderStatusAsyncNotificationRequest
	isSet bool
}

func (v NullableOrderStatusAsyncNotificationRequest) Get() *OrderStatusAsyncNotificationRequest {
	return v.value
}

func (v *NullableOrderStatusAsyncNotificationRequest) Set(val *OrderStatusAsyncNotificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatusAsyncNotificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatusAsyncNotificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatusAsyncNotificationRequest(val *OrderStatusAsyncNotificationRequest) *NullableOrderStatusAsyncNotificationRequest {
	return &NullableOrderStatusAsyncNotificationRequest{value: val, isSet: true}
}

func (v NullableOrderStatusAsyncNotificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatusAsyncNotificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


