/*
Reseller API

For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi.sdk.resellers

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InvoicesV5APIService InvoicesV5API service
type InvoicesV5APIService service

type ApiGetInvoicesRequest struct {
	ctx context.Context
	ApiService *InvoicesV5APIService
	invoiceNumber string
	customerNumber *string
	isoCountryCode *string
}

// Your unique Ingram Micro customer number
func (r ApiGetInvoicesRequest) CustomerNumber(customerNumber string) ApiGetInvoicesRequest {
	r.customerNumber = &customerNumber
	return r
}

// ISO 2 char country code
func (r ApiGetInvoicesRequest) IsoCountryCode(isoCountryCode string) ApiGetInvoicesRequest {
	r.isoCountryCode = &isoCountryCode
	return r
}

func (r ApiGetInvoicesRequest) Execute() (*InvoiceDetails, *http.Response, error) {
	return r.ApiService.GetInvoicesExecute(r)
}

/*
GetInvoices Get Invoice Details

View invoice details. This is a request to query invoice details for a specific Ingram Micro order placed in the last 9 months, whether open or shipped.

 <strong>invoiceNumber</strong>, <strong>isoCountryCode</strong> and <strong>customerNumber</strong> parameters are required.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param invoiceNumber Ingram Micro Invoice Number
 @return ApiGetInvoicesRequest
*/
func (a *InvoicesV5APIService) GetInvoices(ctx context.Context, invoiceNumber string) ApiGetInvoicesRequest {
	return ApiGetInvoicesRequest{
		ApiService: a,
		ctx: ctx,
		invoiceNumber: invoiceNumber,
	}
}

// Execute executes the request
//  @return InvoiceDetails
func (a *InvoicesV5APIService) GetInvoicesExecute(r ApiGetInvoicesRequest) (*InvoiceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesV5APIService.GetInvoices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v5/invoices/{invoiceNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"invoiceNumber"+"}", url.PathEscape(parameterValueToString(r.invoiceNumber, "invoiceNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.invoiceNumber) > 12 {
		return localVarReturnValue, nil, reportError("invoiceNumber must have less than 12 elements")
	}
	if r.customerNumber == nil {
		return localVarReturnValue, nil, reportError("customerNumber is required and must be specified")
	}
	if strlen(*r.customerNumber) > 10 {
		return localVarReturnValue, nil, reportError("customerNumber must have less than 10 elements")
	}
	if r.isoCountryCode == nil {
		return localVarReturnValue, nil, reportError("isoCountryCode is required and must be specified")
	}
	if strlen(*r.isoCountryCode) < 2 {
		return localVarReturnValue, nil, reportError("isoCountryCode must have at least 2 elements")
	}
	if strlen(*r.isoCountryCode) > 2 {
		return localVarReturnValue, nil, reportError("isoCountryCode must have less than 2 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "customerNumber", r.customerNumber, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "isoCountryCode", r.isoCountryCode, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
