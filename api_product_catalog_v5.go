/*
Reseller API Documentation

For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi-sdk-resellers-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ProductCatalogV5APIService ProductCatalogV5API service
type ProductCatalogV5APIService service

type ApiGetV5CatalogProductsearchRequest struct {
	ctx context.Context
	ApiService *ProductCatalogV5APIService
	customerNumber *string
	isoCountryCode *string
	partNumber *string
}

// Your unique Ingram Micro customer number
func (r ApiGetV5CatalogProductsearchRequest) CustomerNumber(customerNumber string) ApiGetV5CatalogProductsearchRequest {
	r.customerNumber = &customerNumber
	return r
}

// 2 chars country code
func (r ApiGetV5CatalogProductsearchRequest) IsoCountryCode(isoCountryCode string) ApiGetV5CatalogProductsearchRequest {
	r.isoCountryCode = &isoCountryCode
	return r
}

// Part Number can be ingram part number or vendor part number or customer part number or UPC
func (r ApiGetV5CatalogProductsearchRequest) PartNumber(partNumber string) ApiGetV5CatalogProductsearchRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiGetV5CatalogProductsearchRequest) Execute() (*ProductSearchResponse, *http.Response, error) {
	return r.ApiService.GetV5CatalogProductsearchExecute(r)
}

/*
GetV5CatalogProductsearch Search Product Catalog

Search the Ingram Micro product catalog using customerNumber, isoCountryCode and partNumber.<ul><li>customerNumber and isoCountryCode fields are required.</li><li>The PartNumber field accepts the following:<ul><li>Ingram part number</li><li>Vendor part number</li><li>Customer part number</li><li>UPC (Universal Product Code)</li></ul></li></ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetV5CatalogProductsearchRequest
*/
func (a *ProductCatalogV5APIService) GetV5CatalogProductsearch(ctx context.Context) ApiGetV5CatalogProductsearchRequest {
	return ApiGetV5CatalogProductsearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProductSearchResponse
func (a *ProductCatalogV5APIService) GetV5CatalogProductsearchExecute(r ApiGetV5CatalogProductsearchRequest) (*ProductSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductCatalogV5APIService.GetV5CatalogProductsearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v5/Catalog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customerNumber == nil {
		return localVarReturnValue, nil, reportError("customerNumber is required and must be specified")
	}
	if r.isoCountryCode == nil {
		return localVarReturnValue, nil, reportError("isoCountryCode is required and must be specified")
	}
	if strlen(*r.isoCountryCode) < 2 {
		return localVarReturnValue, nil, reportError("isoCountryCode must have at least 2 elements")
	}
	if strlen(*r.isoCountryCode) > 2 {
		return localVarReturnValue, nil, reportError("isoCountryCode must have less than 2 elements")
	}
	if r.partNumber == nil {
		return localVarReturnValue, nil, reportError("partNumber is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "customerNumber", r.customerNumber, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "isoCountryCode", r.isoCountryCode, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "partNumber", r.partNumber, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMultiSKUPriceAndStockRequest struct {
	ctx context.Context
	ApiService *ProductCatalogV5APIService
	priceAndAvailabilityRequest *PriceAndAvailabilityRequest
}

func (r ApiMultiSKUPriceAndStockRequest) PriceAndAvailabilityRequest(priceAndAvailabilityRequest PriceAndAvailabilityRequest) ApiMultiSKUPriceAndStockRequest {
	r.priceAndAvailabilityRequest = &priceAndAvailabilityRequest
	return r
}

func (r ApiMultiSKUPriceAndStockRequest) Execute() (*PriceAndAvailabilityResponse, *http.Response, error) {
	return r.ApiService.MultiSKUPriceAndStockExecute(r)
}

/*
MultiSKUPriceAndStock Find availability of upto 50 SKUs

Search the product catalog for the price and availability for up to 50 SKUs at one time. This endpoint helps to confirm the details just prior to placing a real-time call.<ul><li>You may request visibility for reserve stock if you participate in reserved inventory, in addition to the stock that is open to all the partners. Please see the details in the endpoint model below.</li><li>Follow these guidelines when using this endpoint:<ul><li>This endpoint is not for refreshing the full catalog with availability and pricing information. Ingram Micro applies rate limits on this endpoint. Continuous cyclical calls will error out. Customers that perform this activity may lose access to the endpoint.</li><li>For the full catalog refresh, Ingram Micro can provide a Price and Inventory file in flat file format, made available through FTP download. Please contact your Ingram Micro sales rep for details.</li></ul></li></ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMultiSKUPriceAndStockRequest
*/
func (a *ProductCatalogV5APIService) MultiSKUPriceAndStock(ctx context.Context) ApiMultiSKUPriceAndStockRequest {
	return ApiMultiSKUPriceAndStockRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PriceAndAvailabilityResponse
func (a *ProductCatalogV5APIService) MultiSKUPriceAndStockExecute(r ApiMultiSKUPriceAndStockRequest) (*PriceAndAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PriceAndAvailabilityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductCatalogV5APIService.MultiSKUPriceAndStock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v5/Catalog/priceandavailability"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.priceAndAvailabilityRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
