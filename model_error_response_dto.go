/*
XI SDK Resellers

For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi_sdk_resellers

import (
	"encoding/json"
)

// checks if the ErrorResponseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseDTO{}

// ErrorResponseDTO struct for ErrorResponseDTO
type ErrorResponseDTO struct {
	Errors []Error `json:"errors,omitempty"`
}

// NewErrorResponseDTO instantiates a new ErrorResponseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseDTO() *ErrorResponseDTO {
	this := ErrorResponseDTO{}
	return &this
}

// NewErrorResponseDTOWithDefaults instantiates a new ErrorResponseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseDTOWithDefaults() *ErrorResponseDTO {
	this := ErrorResponseDTO{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorResponseDTO) GetErrors() []Error {
	if o == nil {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorResponseDTO) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ErrorResponseDTO) HasErrors() bool {
	if o != nil && IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *ErrorResponseDTO) SetErrors(v []Error) {
	o.Errors = v
}

func (o ErrorResponseDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableErrorResponseDTO struct {
	value *ErrorResponseDTO
	isSet bool
}

func (v NullableErrorResponseDTO) Get() *ErrorResponseDTO {
	return v.value
}

func (v *NullableErrorResponseDTO) Set(val *ErrorResponseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseDTO(val *ErrorResponseDTO) *NullableErrorResponseDTO {
	return &NullableErrorResponseDTO{value: val, isSet: true}
}

func (v NullableErrorResponseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


