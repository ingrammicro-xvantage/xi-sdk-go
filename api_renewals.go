/*
Reseller API Documentation

For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi-sdk-resellers-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RenewalsAPIService RenewalsAPI service
type RenewalsAPIService service

type ApiGetResellersV6RenewalsdetailsRequest struct {
	ctx context.Context
	ApiService *RenewalsAPIService
	iMCustomerNumber *string
	iMCountryCode *string
	iMCorrelationID *string
	renewalId string
	iMSenderID *string
}

// Your unique Ingram Micro customer number.
func (r ApiGetResellersV6RenewalsdetailsRequest) IMCustomerNumber(iMCustomerNumber string) ApiGetResellersV6RenewalsdetailsRequest {
	r.iMCustomerNumber = &iMCustomerNumber
	return r
}

// Two-character ISO country code.
func (r ApiGetResellersV6RenewalsdetailsRequest) IMCountryCode(iMCountryCode string) ApiGetResellersV6RenewalsdetailsRequest {
	r.iMCountryCode = &iMCountryCode
	return r
}

// Unique transaction number to identify each transaction across all the systems.
func (r ApiGetResellersV6RenewalsdetailsRequest) IMCorrelationID(iMCorrelationID string) ApiGetResellersV6RenewalsdetailsRequest {
	r.iMCorrelationID = &iMCorrelationID
	return r
}

// Unique value used to identify the sender of the transaction. Example: MyCompany
func (r ApiGetResellersV6RenewalsdetailsRequest) IMSenderID(iMSenderID string) ApiGetResellersV6RenewalsdetailsRequest {
	r.iMSenderID = &iMSenderID
	return r
}

func (r ApiGetResellersV6RenewalsdetailsRequest) Execute() (*RenewalsDetailsResponse, *http.Response, error) {
	return r.ApiService.GetResellersV6RenewalsdetailsExecute(r)
}

/*
GetResellersV6Renewalsdetails Renewals Details

The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param renewalId Unique Ingram renewal ID.
 @return ApiGetResellersV6RenewalsdetailsRequest
*/
func (a *RenewalsAPIService) GetResellersV6Renewalsdetails(ctx context.Context, renewalId string) ApiGetResellersV6RenewalsdetailsRequest {
	return ApiGetResellersV6RenewalsdetailsRequest{
		ApiService: a,
		ctx: ctx,
		renewalId: renewalId,
	}
}

// Execute executes the request
//  @return RenewalsDetailsResponse
func (a *RenewalsAPIService) GetResellersV6RenewalsdetailsExecute(r ApiGetResellersV6RenewalsdetailsRequest) (*RenewalsDetailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RenewalsDetailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenewalsAPIService.GetResellersV6Renewalsdetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v6/renewals/{renewalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"renewalId"+"}", url.PathEscape(parameterValueToString(r.renewalId, "renewalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.iMCustomerNumber == nil {
		return localVarReturnValue, nil, reportError("iMCustomerNumber is required and must be specified")
	}
	if strlen(*r.iMCustomerNumber) > 10 {
		return localVarReturnValue, nil, reportError("iMCustomerNumber must have less than 10 elements")
	}
	if r.iMCountryCode == nil {
		return localVarReturnValue, nil, reportError("iMCountryCode is required and must be specified")
	}
	if strlen(*r.iMCountryCode) < 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have at least 2 elements")
	}
	if strlen(*r.iMCountryCode) > 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have less than 2 elements")
	}
	if r.iMCorrelationID == nil {
		return localVarReturnValue, nil, reportError("iMCorrelationID is required and must be specified")
	}
	if strlen(*r.iMCorrelationID) > 32 {
		return localVarReturnValue, nil, reportError("iMCorrelationID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CustomerNumber", r.iMCustomerNumber, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CountryCode", r.iMCountryCode, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CorrelationID", r.iMCorrelationID, "")
	if r.iMSenderID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-SenderID", r.iMSenderID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PostRenewalssearch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GetResellerV6ValidateQuote500Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRenewalssearchRequest struct {
	ctx context.Context
	ApiService *RenewalsAPIService
	iMCustomerNumber *string
	iMCountryCode *string
	iMCorrelationID *string
	contentType *string
	iMSenderID *string
	customerOrderNumber *string
	ingramPurchaseOrderNumber *string
	serialNumber *string
	page *string
	size *string
	sort *string
	renewalsSearchRequest *RenewalsSearchRequest
}

// Your unique Ingram Micro customer number.
func (r ApiPostRenewalssearchRequest) IMCustomerNumber(iMCustomerNumber string) ApiPostRenewalssearchRequest {
	r.iMCustomerNumber = &iMCustomerNumber
	return r
}

// Two-character ISO country code.
func (r ApiPostRenewalssearchRequest) IMCountryCode(iMCountryCode string) ApiPostRenewalssearchRequest {
	r.iMCountryCode = &iMCountryCode
	return r
}

// Unique transaction number to identify each transaction across all the systems.
func (r ApiPostRenewalssearchRequest) IMCorrelationID(iMCorrelationID string) ApiPostRenewalssearchRequest {
	r.iMCorrelationID = &iMCorrelationID
	return r
}

// The media type for JSON Request.
func (r ApiPostRenewalssearchRequest) ContentType(contentType string) ApiPostRenewalssearchRequest {
	r.contentType = &contentType
	return r
}

// Unique value used to identify the sender of the transaction. Example: MyCompany
func (r ApiPostRenewalssearchRequest) IMSenderID(iMSenderID string) ApiPostRenewalssearchRequest {
	r.iMSenderID = &iMSenderID
	return r
}

// The reseller&#39;s unique PO/Order number.
func (r ApiPostRenewalssearchRequest) CustomerOrderNumber(customerOrderNumber string) ApiPostRenewalssearchRequest {
	r.customerOrderNumber = &customerOrderNumber
	return r
}

// Sales order number.
func (r ApiPostRenewalssearchRequest) IngramPurchaseOrderNumber(ingramPurchaseOrderNumber string) ApiPostRenewalssearchRequest {
	r.ingramPurchaseOrderNumber = &ingramPurchaseOrderNumber
	return r
}

// A serial number of the product.
func (r ApiPostRenewalssearchRequest) SerialNumber(serialNumber string) ApiPostRenewalssearchRequest {
	r.serialNumber = &serialNumber
	return r
}

// Number of page.
func (r ApiPostRenewalssearchRequest) Page(page string) ApiPostRenewalssearchRequest {
	r.page = &page
	return r
}

// The submitted pagesize, default is 25.
func (r ApiPostRenewalssearchRequest) Size(size string) ApiPostRenewalssearchRequest {
	r.size = &size
	return r
}

// Refers to the column selected to apply the sorting criteria.
func (r ApiPostRenewalssearchRequest) Sort(sort string) ApiPostRenewalssearchRequest {
	r.sort = &sort
	return r
}

func (r ApiPostRenewalssearchRequest) RenewalsSearchRequest(renewalsSearchRequest RenewalsSearchRequest) ApiPostRenewalssearchRequest {
	r.renewalsSearchRequest = &renewalsSearchRequest
	return r
}

func (r ApiPostRenewalssearchRequest) Execute() (*RenewalsSearchResponse, *http.Response, error) {
	return r.ApiService.PostRenewalssearchExecute(r)
}

/*
PostRenewalssearch Renewals Search

The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRenewalssearchRequest
*/
func (a *RenewalsAPIService) PostRenewalssearch(ctx context.Context) ApiPostRenewalssearchRequest {
	return ApiPostRenewalssearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RenewalsSearchResponse
func (a *RenewalsAPIService) PostRenewalssearchExecute(r ApiPostRenewalssearchRequest) (*RenewalsSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RenewalsSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenewalsAPIService.PostRenewalssearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v6/renewals/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.iMCustomerNumber == nil {
		return localVarReturnValue, nil, reportError("iMCustomerNumber is required and must be specified")
	}
	if strlen(*r.iMCustomerNumber) > 10 {
		return localVarReturnValue, nil, reportError("iMCustomerNumber must have less than 10 elements")
	}
	if r.iMCountryCode == nil {
		return localVarReturnValue, nil, reportError("iMCountryCode is required and must be specified")
	}
	if strlen(*r.iMCountryCode) < 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have at least 2 elements")
	}
	if strlen(*r.iMCountryCode) > 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have less than 2 elements")
	}
	if r.iMCorrelationID == nil {
		return localVarReturnValue, nil, reportError("iMCorrelationID is required and must be specified")
	}
	if strlen(*r.iMCorrelationID) > 32 {
		return localVarReturnValue, nil, reportError("iMCorrelationID must have less than 32 elements")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	if r.customerOrderNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerOrderNumber", r.customerOrderNumber, "")
	}
	if r.ingramPurchaseOrderNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ingramPurchaseOrderNumber", r.ingramPurchaseOrderNumber, "")
	}
	if r.serialNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialNumber", r.serialNumber, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CustomerNumber", r.iMCustomerNumber, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CountryCode", r.iMCountryCode, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CorrelationID", r.iMCorrelationID, "")
	if r.iMSenderID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-SenderID", r.iMSenderID, "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Content type", r.contentType, "")
	// body params
	localVarPostBody = r.renewalsSearchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PostRenewalssearch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GetResellerV6ValidateQuote500Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
