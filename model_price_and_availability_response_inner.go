/*
Reseller API Documentation

For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi-sdk-resellers-go

import (
	"encoding/json"
)

// checks if the PriceAndAvailabilityResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceAndAvailabilityResponseInner{}

// PriceAndAvailabilityResponseInner struct for PriceAndAvailabilityResponseInner
type PriceAndAvailabilityResponseInner struct {
	// Codes signifying whether the sku is active or not.
	ProductStatusCode *string `json:"productStatusCode,omitempty"`
	// Message returned saying whether sku is active.
	ProductStatusMessage *string `json:"productStatusMessage,omitempty"`
	// Ingram Micro unique part number for the product.
	IngramPartNumber *string `json:"ingramPartNumber,omitempty"`
	// Vendor’s part number for the product.
	VendorPartNumber *string `json:"vendorPartNumber,omitempty"`
	// Extended Vendor Part Number. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
	ExtendedVendorPartNumber *string `json:"extendedVendorPartNumber,omitempty"`
	// Reseller / end-user’s part number for the product.
	CustomerPartNumber *string `json:"customerPartNumber,omitempty"`
	// The UPC code for the product. Consists of 12 numeric digits that are uniquely assigned to each trade item.
	Upc *string `json:"upc,omitempty"`
	// Number type of the part.
	PartNumberType *string `json:"partNumberType,omitempty"`
	// Vendor number that identifies the product.
	VendorNumber *string `json:"vendorNumber,omitempty"`
	// Vendor name for the order.
	VendorName *string `json:"vendorName,omitempty"`
	// The description given for the product.
	Description *string `json:"description,omitempty"`
	// Indicates whether the product is directly shipped from the vendor’s warehouse or if the product ships from Ingram Micro’s warehouse. Class Codes are Ingram classifications on how skus are stocked A = Product that is stocked usually in all IM warehouses and replenished on a regular basis. B = Product that is stocked in limited IM warehouses and replenished on a regular basis C = Product that is stocked in fewer IM warehouses and replenished on a regular basis. D = Product that Ingram Micro has elected to discontinue. E = Product that will be phased out later, according to the vendor. You may not want to replenish this product, but instead sell down what is in stock. F = Product that we carry for a specific customer or supplier under a contractual agreement. N = New Sku. Classification before first receipt O = Discontinued product to be liquidated S= Order for Specialized Demand (Order to backorder) X= direct ship from Vendor V = product that vendor has elected to discontinue.
	ProductClass *string `json:"productClass,omitempty"`
	// The description given for the product.
	Uom *string `json:"uom,omitempty"`
	// Status that gives whether the product is Active.
	ProductStatus *string `json:"productStatus,omitempty"`
	// Boolean that indicates if the product accepts backorder.
	AcceptBackOrder *bool `json:"acceptBackOrder,omitempty"`
	// Boolean that indicates whether a product is authorized.
	ProductAuthorized *bool `json:"productAuthorized,omitempty"`
	// Boolean that indicates if the product can be returned.
	ReturnableProduct *bool `json:"returnableProduct,omitempty"`
	// Boolean that indicates  if end user information is required.
	EndUserInfoRequired *bool `json:"endUserInfoRequired,omitempty"`
	// Boolean that indicates if special pricing is available for the product.
	GovtSpecialPriceAvailable *bool `json:"govtSpecialPriceAvailable,omitempty"`
	// Program type, “PA” for government orders, “ED” for education order.
	GovtProgramType *string `json:"govtProgramType,omitempty"`
	// Type of end user of the program. F = Federal, S = State, E = Local, K = K-12 school, and H = Higher Education.
	GovtEndUserType *string `json:"govtEndUserType,omitempty"`
	Availability *PriceAndAvailabilityResponseInnerAvailability `json:"availability,omitempty"`
	ReserveInventoryDetails []PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner `json:"reserveInventoryDetails,omitempty"`
	Pricing *PriceAndAvailabilityResponseInnerPricing `json:"pricing,omitempty"`
	Discounts []PriceAndAvailabilityResponseInnerDiscountsInner `json:"discounts,omitempty"`
	// True of false value to indicate whether it’s bundle part. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
	BundlePartIndicator *bool `json:"bundlePartIndicator,omitempty"`
	// *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
	ServiceFees []PriceAndAvailabilityResponseInnerServiceFeesInner `json:"serviceFees,omitempty"`
}

// NewPriceAndAvailabilityResponseInner instantiates a new PriceAndAvailabilityResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceAndAvailabilityResponseInner() *PriceAndAvailabilityResponseInner {
	this := PriceAndAvailabilityResponseInner{}
	return &this
}

// NewPriceAndAvailabilityResponseInnerWithDefaults instantiates a new PriceAndAvailabilityResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceAndAvailabilityResponseInnerWithDefaults() *PriceAndAvailabilityResponseInner {
	this := PriceAndAvailabilityResponseInner{}
	return &this
}

// GetProductStatusCode returns the ProductStatusCode field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetProductStatusCode() string {
	if o == nil || IsNil(o.ProductStatusCode) {
		var ret string
		return ret
	}
	return *o.ProductStatusCode
}

// GetProductStatusCodeOk returns a tuple with the ProductStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetProductStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductStatusCode) {
		return nil, false
	}
	return o.ProductStatusCode, true
}

// HasProductStatusCode returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasProductStatusCode() bool {
	if o != nil && !IsNil(o.ProductStatusCode) {
		return true
	}

	return false
}

// SetProductStatusCode gets a reference to the given string and assigns it to the ProductStatusCode field.
func (o *PriceAndAvailabilityResponseInner) SetProductStatusCode(v string) {
	o.ProductStatusCode = &v
}

// GetProductStatusMessage returns the ProductStatusMessage field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetProductStatusMessage() string {
	if o == nil || IsNil(o.ProductStatusMessage) {
		var ret string
		return ret
	}
	return *o.ProductStatusMessage
}

// GetProductStatusMessageOk returns a tuple with the ProductStatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetProductStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ProductStatusMessage) {
		return nil, false
	}
	return o.ProductStatusMessage, true
}

// HasProductStatusMessage returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasProductStatusMessage() bool {
	if o != nil && !IsNil(o.ProductStatusMessage) {
		return true
	}

	return false
}

// SetProductStatusMessage gets a reference to the given string and assigns it to the ProductStatusMessage field.
func (o *PriceAndAvailabilityResponseInner) SetProductStatusMessage(v string) {
	o.ProductStatusMessage = &v
}

// GetIngramPartNumber returns the IngramPartNumber field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetIngramPartNumber() string {
	if o == nil || IsNil(o.IngramPartNumber) {
		var ret string
		return ret
	}
	return *o.IngramPartNumber
}

// GetIngramPartNumberOk returns a tuple with the IngramPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetIngramPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.IngramPartNumber) {
		return nil, false
	}
	return o.IngramPartNumber, true
}

// HasIngramPartNumber returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasIngramPartNumber() bool {
	if o != nil && !IsNil(o.IngramPartNumber) {
		return true
	}

	return false
}

// SetIngramPartNumber gets a reference to the given string and assigns it to the IngramPartNumber field.
func (o *PriceAndAvailabilityResponseInner) SetIngramPartNumber(v string) {
	o.IngramPartNumber = &v
}

// GetVendorPartNumber returns the VendorPartNumber field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetVendorPartNumber() string {
	if o == nil || IsNil(o.VendorPartNumber) {
		var ret string
		return ret
	}
	return *o.VendorPartNumber
}

// GetVendorPartNumberOk returns a tuple with the VendorPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetVendorPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorPartNumber) {
		return nil, false
	}
	return o.VendorPartNumber, true
}

// HasVendorPartNumber returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasVendorPartNumber() bool {
	if o != nil && !IsNil(o.VendorPartNumber) {
		return true
	}

	return false
}

// SetVendorPartNumber gets a reference to the given string and assigns it to the VendorPartNumber field.
func (o *PriceAndAvailabilityResponseInner) SetVendorPartNumber(v string) {
	o.VendorPartNumber = &v
}

// GetExtendedVendorPartNumber returns the ExtendedVendorPartNumber field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetExtendedVendorPartNumber() string {
	if o == nil || IsNil(o.ExtendedVendorPartNumber) {
		var ret string
		return ret
	}
	return *o.ExtendedVendorPartNumber
}

// GetExtendedVendorPartNumberOk returns a tuple with the ExtendedVendorPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetExtendedVendorPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedVendorPartNumber) {
		return nil, false
	}
	return o.ExtendedVendorPartNumber, true
}

// HasExtendedVendorPartNumber returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasExtendedVendorPartNumber() bool {
	if o != nil && !IsNil(o.ExtendedVendorPartNumber) {
		return true
	}

	return false
}

// SetExtendedVendorPartNumber gets a reference to the given string and assigns it to the ExtendedVendorPartNumber field.
func (o *PriceAndAvailabilityResponseInner) SetExtendedVendorPartNumber(v string) {
	o.ExtendedVendorPartNumber = &v
}

// GetCustomerPartNumber returns the CustomerPartNumber field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetCustomerPartNumber() string {
	if o == nil || IsNil(o.CustomerPartNumber) {
		var ret string
		return ret
	}
	return *o.CustomerPartNumber
}

// GetCustomerPartNumberOk returns a tuple with the CustomerPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetCustomerPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPartNumber) {
		return nil, false
	}
	return o.CustomerPartNumber, true
}

// HasCustomerPartNumber returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasCustomerPartNumber() bool {
	if o != nil && !IsNil(o.CustomerPartNumber) {
		return true
	}

	return false
}

// SetCustomerPartNumber gets a reference to the given string and assigns it to the CustomerPartNumber field.
func (o *PriceAndAvailabilityResponseInner) SetCustomerPartNumber(v string) {
	o.CustomerPartNumber = &v
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *PriceAndAvailabilityResponseInner) SetUpc(v string) {
	o.Upc = &v
}

// GetPartNumberType returns the PartNumberType field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetPartNumberType() string {
	if o == nil || IsNil(o.PartNumberType) {
		var ret string
		return ret
	}
	return *o.PartNumberType
}

// GetPartNumberTypeOk returns a tuple with the PartNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetPartNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumberType) {
		return nil, false
	}
	return o.PartNumberType, true
}

// HasPartNumberType returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasPartNumberType() bool {
	if o != nil && !IsNil(o.PartNumberType) {
		return true
	}

	return false
}

// SetPartNumberType gets a reference to the given string and assigns it to the PartNumberType field.
func (o *PriceAndAvailabilityResponseInner) SetPartNumberType(v string) {
	o.PartNumberType = &v
}

// GetVendorNumber returns the VendorNumber field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetVendorNumber() string {
	if o == nil || IsNil(o.VendorNumber) {
		var ret string
		return ret
	}
	return *o.VendorNumber
}

// GetVendorNumberOk returns a tuple with the VendorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetVendorNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorNumber) {
		return nil, false
	}
	return o.VendorNumber, true
}

// HasVendorNumber returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasVendorNumber() bool {
	if o != nil && !IsNil(o.VendorNumber) {
		return true
	}

	return false
}

// SetVendorNumber gets a reference to the given string and assigns it to the VendorNumber field.
func (o *PriceAndAvailabilityResponseInner) SetVendorNumber(v string) {
	o.VendorNumber = &v
}

// GetVendorName returns the VendorName field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetVendorName() string {
	if o == nil || IsNil(o.VendorName) {
		var ret string
		return ret
	}
	return *o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetVendorNameOk() (*string, bool) {
	if o == nil || IsNil(o.VendorName) {
		return nil, false
	}
	return o.VendorName, true
}

// HasVendorName returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasVendorName() bool {
	if o != nil && !IsNil(o.VendorName) {
		return true
	}

	return false
}

// SetVendorName gets a reference to the given string and assigns it to the VendorName field.
func (o *PriceAndAvailabilityResponseInner) SetVendorName(v string) {
	o.VendorName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PriceAndAvailabilityResponseInner) SetDescription(v string) {
	o.Description = &v
}

// GetProductClass returns the ProductClass field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetProductClass() string {
	if o == nil || IsNil(o.ProductClass) {
		var ret string
		return ret
	}
	return *o.ProductClass
}

// GetProductClassOk returns a tuple with the ProductClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetProductClassOk() (*string, bool) {
	if o == nil || IsNil(o.ProductClass) {
		return nil, false
	}
	return o.ProductClass, true
}

// HasProductClass returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasProductClass() bool {
	if o != nil && !IsNil(o.ProductClass) {
		return true
	}

	return false
}

// SetProductClass gets a reference to the given string and assigns it to the ProductClass field.
func (o *PriceAndAvailabilityResponseInner) SetProductClass(v string) {
	o.ProductClass = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *PriceAndAvailabilityResponseInner) SetUom(v string) {
	o.Uom = &v
}

// GetProductStatus returns the ProductStatus field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetProductStatus() string {
	if o == nil || IsNil(o.ProductStatus) {
		var ret string
		return ret
	}
	return *o.ProductStatus
}

// GetProductStatusOk returns a tuple with the ProductStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetProductStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ProductStatus) {
		return nil, false
	}
	return o.ProductStatus, true
}

// HasProductStatus returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasProductStatus() bool {
	if o != nil && !IsNil(o.ProductStatus) {
		return true
	}

	return false
}

// SetProductStatus gets a reference to the given string and assigns it to the ProductStatus field.
func (o *PriceAndAvailabilityResponseInner) SetProductStatus(v string) {
	o.ProductStatus = &v
}

// GetAcceptBackOrder returns the AcceptBackOrder field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetAcceptBackOrder() bool {
	if o == nil || IsNil(o.AcceptBackOrder) {
		var ret bool
		return ret
	}
	return *o.AcceptBackOrder
}

// GetAcceptBackOrderOk returns a tuple with the AcceptBackOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetAcceptBackOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.AcceptBackOrder) {
		return nil, false
	}
	return o.AcceptBackOrder, true
}

// HasAcceptBackOrder returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasAcceptBackOrder() bool {
	if o != nil && !IsNil(o.AcceptBackOrder) {
		return true
	}

	return false
}

// SetAcceptBackOrder gets a reference to the given bool and assigns it to the AcceptBackOrder field.
func (o *PriceAndAvailabilityResponseInner) SetAcceptBackOrder(v bool) {
	o.AcceptBackOrder = &v
}

// GetProductAuthorized returns the ProductAuthorized field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetProductAuthorized() bool {
	if o == nil || IsNil(o.ProductAuthorized) {
		var ret bool
		return ret
	}
	return *o.ProductAuthorized
}

// GetProductAuthorizedOk returns a tuple with the ProductAuthorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetProductAuthorizedOk() (*bool, bool) {
	if o == nil || IsNil(o.ProductAuthorized) {
		return nil, false
	}
	return o.ProductAuthorized, true
}

// HasProductAuthorized returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasProductAuthorized() bool {
	if o != nil && !IsNil(o.ProductAuthorized) {
		return true
	}

	return false
}

// SetProductAuthorized gets a reference to the given bool and assigns it to the ProductAuthorized field.
func (o *PriceAndAvailabilityResponseInner) SetProductAuthorized(v bool) {
	o.ProductAuthorized = &v
}

// GetReturnableProduct returns the ReturnableProduct field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetReturnableProduct() bool {
	if o == nil || IsNil(o.ReturnableProduct) {
		var ret bool
		return ret
	}
	return *o.ReturnableProduct
}

// GetReturnableProductOk returns a tuple with the ReturnableProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetReturnableProductOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnableProduct) {
		return nil, false
	}
	return o.ReturnableProduct, true
}

// HasReturnableProduct returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasReturnableProduct() bool {
	if o != nil && !IsNil(o.ReturnableProduct) {
		return true
	}

	return false
}

// SetReturnableProduct gets a reference to the given bool and assigns it to the ReturnableProduct field.
func (o *PriceAndAvailabilityResponseInner) SetReturnableProduct(v bool) {
	o.ReturnableProduct = &v
}

// GetEndUserInfoRequired returns the EndUserInfoRequired field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetEndUserInfoRequired() bool {
	if o == nil || IsNil(o.EndUserInfoRequired) {
		var ret bool
		return ret
	}
	return *o.EndUserInfoRequired
}

// GetEndUserInfoRequiredOk returns a tuple with the EndUserInfoRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetEndUserInfoRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.EndUserInfoRequired) {
		return nil, false
	}
	return o.EndUserInfoRequired, true
}

// HasEndUserInfoRequired returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasEndUserInfoRequired() bool {
	if o != nil && !IsNil(o.EndUserInfoRequired) {
		return true
	}

	return false
}

// SetEndUserInfoRequired gets a reference to the given bool and assigns it to the EndUserInfoRequired field.
func (o *PriceAndAvailabilityResponseInner) SetEndUserInfoRequired(v bool) {
	o.EndUserInfoRequired = &v
}

// GetGovtSpecialPriceAvailable returns the GovtSpecialPriceAvailable field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetGovtSpecialPriceAvailable() bool {
	if o == nil || IsNil(o.GovtSpecialPriceAvailable) {
		var ret bool
		return ret
	}
	return *o.GovtSpecialPriceAvailable
}

// GetGovtSpecialPriceAvailableOk returns a tuple with the GovtSpecialPriceAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetGovtSpecialPriceAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.GovtSpecialPriceAvailable) {
		return nil, false
	}
	return o.GovtSpecialPriceAvailable, true
}

// HasGovtSpecialPriceAvailable returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasGovtSpecialPriceAvailable() bool {
	if o != nil && !IsNil(o.GovtSpecialPriceAvailable) {
		return true
	}

	return false
}

// SetGovtSpecialPriceAvailable gets a reference to the given bool and assigns it to the GovtSpecialPriceAvailable field.
func (o *PriceAndAvailabilityResponseInner) SetGovtSpecialPriceAvailable(v bool) {
	o.GovtSpecialPriceAvailable = &v
}

// GetGovtProgramType returns the GovtProgramType field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetGovtProgramType() string {
	if o == nil || IsNil(o.GovtProgramType) {
		var ret string
		return ret
	}
	return *o.GovtProgramType
}

// GetGovtProgramTypeOk returns a tuple with the GovtProgramType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetGovtProgramTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GovtProgramType) {
		return nil, false
	}
	return o.GovtProgramType, true
}

// HasGovtProgramType returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasGovtProgramType() bool {
	if o != nil && !IsNil(o.GovtProgramType) {
		return true
	}

	return false
}

// SetGovtProgramType gets a reference to the given string and assigns it to the GovtProgramType field.
func (o *PriceAndAvailabilityResponseInner) SetGovtProgramType(v string) {
	o.GovtProgramType = &v
}

// GetGovtEndUserType returns the GovtEndUserType field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetGovtEndUserType() string {
	if o == nil || IsNil(o.GovtEndUserType) {
		var ret string
		return ret
	}
	return *o.GovtEndUserType
}

// GetGovtEndUserTypeOk returns a tuple with the GovtEndUserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetGovtEndUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GovtEndUserType) {
		return nil, false
	}
	return o.GovtEndUserType, true
}

// HasGovtEndUserType returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasGovtEndUserType() bool {
	if o != nil && !IsNil(o.GovtEndUserType) {
		return true
	}

	return false
}

// SetGovtEndUserType gets a reference to the given string and assigns it to the GovtEndUserType field.
func (o *PriceAndAvailabilityResponseInner) SetGovtEndUserType(v string) {
	o.GovtEndUserType = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetAvailability() PriceAndAvailabilityResponseInnerAvailability {
	if o == nil || IsNil(o.Availability) {
		var ret PriceAndAvailabilityResponseInnerAvailability
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetAvailabilityOk() (*PriceAndAvailabilityResponseInnerAvailability, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given PriceAndAvailabilityResponseInnerAvailability and assigns it to the Availability field.
func (o *PriceAndAvailabilityResponseInner) SetAvailability(v PriceAndAvailabilityResponseInnerAvailability) {
	o.Availability = &v
}

// GetReserveInventoryDetails returns the ReserveInventoryDetails field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetReserveInventoryDetails() []PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner {
	if o == nil || IsNil(o.ReserveInventoryDetails) {
		var ret []PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner
		return ret
	}
	return o.ReserveInventoryDetails
}

// GetReserveInventoryDetailsOk returns a tuple with the ReserveInventoryDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetReserveInventoryDetailsOk() ([]PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner, bool) {
	if o == nil || IsNil(o.ReserveInventoryDetails) {
		return nil, false
	}
	return o.ReserveInventoryDetails, true
}

// HasReserveInventoryDetails returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasReserveInventoryDetails() bool {
	if o != nil && !IsNil(o.ReserveInventoryDetails) {
		return true
	}

	return false
}

// SetReserveInventoryDetails gets a reference to the given []PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner and assigns it to the ReserveInventoryDetails field.
func (o *PriceAndAvailabilityResponseInner) SetReserveInventoryDetails(v []PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner) {
	o.ReserveInventoryDetails = v
}

// GetPricing returns the Pricing field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetPricing() PriceAndAvailabilityResponseInnerPricing {
	if o == nil || IsNil(o.Pricing) {
		var ret PriceAndAvailabilityResponseInnerPricing
		return ret
	}
	return *o.Pricing
}

// GetPricingOk returns a tuple with the Pricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetPricingOk() (*PriceAndAvailabilityResponseInnerPricing, bool) {
	if o == nil || IsNil(o.Pricing) {
		return nil, false
	}
	return o.Pricing, true
}

// HasPricing returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasPricing() bool {
	if o != nil && !IsNil(o.Pricing) {
		return true
	}

	return false
}

// SetPricing gets a reference to the given PriceAndAvailabilityResponseInnerPricing and assigns it to the Pricing field.
func (o *PriceAndAvailabilityResponseInner) SetPricing(v PriceAndAvailabilityResponseInnerPricing) {
	o.Pricing = &v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetDiscounts() []PriceAndAvailabilityResponseInnerDiscountsInner {
	if o == nil || IsNil(o.Discounts) {
		var ret []PriceAndAvailabilityResponseInnerDiscountsInner
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetDiscountsOk() ([]PriceAndAvailabilityResponseInnerDiscountsInner, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []PriceAndAvailabilityResponseInnerDiscountsInner and assigns it to the Discounts field.
func (o *PriceAndAvailabilityResponseInner) SetDiscounts(v []PriceAndAvailabilityResponseInnerDiscountsInner) {
	o.Discounts = v
}

// GetBundlePartIndicator returns the BundlePartIndicator field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetBundlePartIndicator() bool {
	if o == nil || IsNil(o.BundlePartIndicator) {
		var ret bool
		return ret
	}
	return *o.BundlePartIndicator
}

// GetBundlePartIndicatorOk returns a tuple with the BundlePartIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetBundlePartIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.BundlePartIndicator) {
		return nil, false
	}
	return o.BundlePartIndicator, true
}

// HasBundlePartIndicator returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasBundlePartIndicator() bool {
	if o != nil && !IsNil(o.BundlePartIndicator) {
		return true
	}

	return false
}

// SetBundlePartIndicator gets a reference to the given bool and assigns it to the BundlePartIndicator field.
func (o *PriceAndAvailabilityResponseInner) SetBundlePartIndicator(v bool) {
	o.BundlePartIndicator = &v
}

// GetServiceFees returns the ServiceFees field value if set, zero value otherwise.
func (o *PriceAndAvailabilityResponseInner) GetServiceFees() []PriceAndAvailabilityResponseInnerServiceFeesInner {
	if o == nil || IsNil(o.ServiceFees) {
		var ret []PriceAndAvailabilityResponseInnerServiceFeesInner
		return ret
	}
	return o.ServiceFees
}

// GetServiceFeesOk returns a tuple with the ServiceFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceAndAvailabilityResponseInner) GetServiceFeesOk() ([]PriceAndAvailabilityResponseInnerServiceFeesInner, bool) {
	if o == nil || IsNil(o.ServiceFees) {
		return nil, false
	}
	return o.ServiceFees, true
}

// HasServiceFees returns a boolean if a field has been set.
func (o *PriceAndAvailabilityResponseInner) HasServiceFees() bool {
	if o != nil && !IsNil(o.ServiceFees) {
		return true
	}

	return false
}

// SetServiceFees gets a reference to the given []PriceAndAvailabilityResponseInnerServiceFeesInner and assigns it to the ServiceFees field.
func (o *PriceAndAvailabilityResponseInner) SetServiceFees(v []PriceAndAvailabilityResponseInnerServiceFeesInner) {
	o.ServiceFees = v
}

func (o PriceAndAvailabilityResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceAndAvailabilityResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductStatusCode) {
		toSerialize["productStatusCode"] = o.ProductStatusCode
	}
	if !IsNil(o.ProductStatusMessage) {
		toSerialize["productStatusMessage"] = o.ProductStatusMessage
	}
	if !IsNil(o.IngramPartNumber) {
		toSerialize["ingramPartNumber"] = o.IngramPartNumber
	}
	if !IsNil(o.VendorPartNumber) {
		toSerialize["vendorPartNumber"] = o.VendorPartNumber
	}
	if !IsNil(o.ExtendedVendorPartNumber) {
		toSerialize["extendedVendorPartNumber"] = o.ExtendedVendorPartNumber
	}
	if !IsNil(o.CustomerPartNumber) {
		toSerialize["customerPartNumber"] = o.CustomerPartNumber
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	if !IsNil(o.PartNumberType) {
		toSerialize["partNumberType"] = o.PartNumberType
	}
	if !IsNil(o.VendorNumber) {
		toSerialize["vendorNumber"] = o.VendorNumber
	}
	if !IsNil(o.VendorName) {
		toSerialize["vendorName"] = o.VendorName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProductClass) {
		toSerialize["productClass"] = o.ProductClass
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if !IsNil(o.ProductStatus) {
		toSerialize["productStatus"] = o.ProductStatus
	}
	if !IsNil(o.AcceptBackOrder) {
		toSerialize["acceptBackOrder"] = o.AcceptBackOrder
	}
	if !IsNil(o.ProductAuthorized) {
		toSerialize["productAuthorized"] = o.ProductAuthorized
	}
	if !IsNil(o.ReturnableProduct) {
		toSerialize["returnableProduct"] = o.ReturnableProduct
	}
	if !IsNil(o.EndUserInfoRequired) {
		toSerialize["endUserInfoRequired"] = o.EndUserInfoRequired
	}
	if !IsNil(o.GovtSpecialPriceAvailable) {
		toSerialize["govtSpecialPriceAvailable"] = o.GovtSpecialPriceAvailable
	}
	if !IsNil(o.GovtProgramType) {
		toSerialize["govtProgramType"] = o.GovtProgramType
	}
	if !IsNil(o.GovtEndUserType) {
		toSerialize["govtEndUserType"] = o.GovtEndUserType
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.ReserveInventoryDetails) {
		toSerialize["reserveInventoryDetails"] = o.ReserveInventoryDetails
	}
	if !IsNil(o.Pricing) {
		toSerialize["pricing"] = o.Pricing
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.BundlePartIndicator) {
		toSerialize["bundlePartIndicator"] = o.BundlePartIndicator
	}
	if !IsNil(o.ServiceFees) {
		toSerialize["serviceFees"] = o.ServiceFees
	}
	return toSerialize, nil
}

type NullablePriceAndAvailabilityResponseInner struct {
	value *PriceAndAvailabilityResponseInner
	isSet bool
}

func (v NullablePriceAndAvailabilityResponseInner) Get() *PriceAndAvailabilityResponseInner {
	return v.value
}

func (v *NullablePriceAndAvailabilityResponseInner) Set(val *PriceAndAvailabilityResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceAndAvailabilityResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceAndAvailabilityResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceAndAvailabilityResponseInner(val *PriceAndAvailabilityResponseInner) *NullablePriceAndAvailabilityResponseInner {
	return &NullablePriceAndAvailabilityResponseInner{value: val, isSet: true}
}

func (v NullablePriceAndAvailabilityResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceAndAvailabilityResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


