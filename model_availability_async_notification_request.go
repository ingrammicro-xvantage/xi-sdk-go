/*
XI Sdk Resellers

For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi_sdk_resellers

import (
	"encoding/json"
)

// checks if the AvailabilityAsyncNotificationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailabilityAsyncNotificationRequest{}

// AvailabilityAsyncNotificationRequest struct for AvailabilityAsyncNotificationRequest
type AvailabilityAsyncNotificationRequest struct {
	// Field for identifying whether it is a reseller or vendor event. For eg, resellers/orders
	Topic *string `json:"topic,omitempty"`
	// The event sent in the request. For eg, im::create.
	Event *string `json:"event,omitempty"`
	// The timestamp at which the event was sent.
	EventTimeStamp *string `json:"eventTimeStamp,omitempty"`
	// A unique id used as identifier for the sepcific event and used for generating the x-hub signature.
	EventId *string `json:"eventId,omitempty"`
	Resource []AvailabilityAsyncNotificationRequestResourceInner `json:"resource,omitempty"`
}

// NewAvailabilityAsyncNotificationRequest instantiates a new AvailabilityAsyncNotificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityAsyncNotificationRequest() *AvailabilityAsyncNotificationRequest {
	this := AvailabilityAsyncNotificationRequest{}
	return &this
}

// NewAvailabilityAsyncNotificationRequestWithDefaults instantiates a new AvailabilityAsyncNotificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityAsyncNotificationRequestWithDefaults() *AvailabilityAsyncNotificationRequest {
	this := AvailabilityAsyncNotificationRequest{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *AvailabilityAsyncNotificationRequest) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityAsyncNotificationRequest) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *AvailabilityAsyncNotificationRequest) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *AvailabilityAsyncNotificationRequest) SetTopic(v string) {
	o.Topic = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *AvailabilityAsyncNotificationRequest) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityAsyncNotificationRequest) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *AvailabilityAsyncNotificationRequest) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *AvailabilityAsyncNotificationRequest) SetEvent(v string) {
	o.Event = &v
}

// GetEventTimeStamp returns the EventTimeStamp field value if set, zero value otherwise.
func (o *AvailabilityAsyncNotificationRequest) GetEventTimeStamp() string {
	if o == nil || IsNil(o.EventTimeStamp) {
		var ret string
		return ret
	}
	return *o.EventTimeStamp
}

// GetEventTimeStampOk returns a tuple with the EventTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityAsyncNotificationRequest) GetEventTimeStampOk() (*string, bool) {
	if o == nil || IsNil(o.EventTimeStamp) {
		return nil, false
	}
	return o.EventTimeStamp, true
}

// HasEventTimeStamp returns a boolean if a field has been set.
func (o *AvailabilityAsyncNotificationRequest) HasEventTimeStamp() bool {
	if o != nil && !IsNil(o.EventTimeStamp) {
		return true
	}

	return false
}

// SetEventTimeStamp gets a reference to the given string and assigns it to the EventTimeStamp field.
func (o *AvailabilityAsyncNotificationRequest) SetEventTimeStamp(v string) {
	o.EventTimeStamp = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *AvailabilityAsyncNotificationRequest) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityAsyncNotificationRequest) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *AvailabilityAsyncNotificationRequest) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *AvailabilityAsyncNotificationRequest) SetEventId(v string) {
	o.EventId = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *AvailabilityAsyncNotificationRequest) GetResource() []AvailabilityAsyncNotificationRequestResourceInner {
	if o == nil || IsNil(o.Resource) {
		var ret []AvailabilityAsyncNotificationRequestResourceInner
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityAsyncNotificationRequest) GetResourceOk() ([]AvailabilityAsyncNotificationRequestResourceInner, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *AvailabilityAsyncNotificationRequest) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given []AvailabilityAsyncNotificationRequestResourceInner and assigns it to the Resource field.
func (o *AvailabilityAsyncNotificationRequest) SetResource(v []AvailabilityAsyncNotificationRequestResourceInner) {
	o.Resource = v
}

func (o AvailabilityAsyncNotificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailabilityAsyncNotificationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EventTimeStamp) {
		toSerialize["eventTimeStamp"] = o.EventTimeStamp
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableAvailabilityAsyncNotificationRequest struct {
	value *AvailabilityAsyncNotificationRequest
	isSet bool
}

func (v NullableAvailabilityAsyncNotificationRequest) Get() *AvailabilityAsyncNotificationRequest {
	return v.value
}

func (v *NullableAvailabilityAsyncNotificationRequest) Set(val *AvailabilityAsyncNotificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityAsyncNotificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityAsyncNotificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityAsyncNotificationRequest(val *AvailabilityAsyncNotificationRequest) *NullableAvailabilityAsyncNotificationRequest {
	return &NullableAvailabilityAsyncNotificationRequest{value: val, isSet: true}
}

func (v NullableAvailabilityAsyncNotificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityAsyncNotificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


