/*
XI SDK Resellers

For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xi_sdk_resellers

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OrdersV6APIService OrdersV6API service
type OrdersV6APIService service

type ApiGetOrderdetailsV6Request struct {
	ctx context.Context
	ApiService *OrdersV6APIService
	ordernumber string
	iMCustomerNumber *string
	iMCountryCode *string
	iMCorrelationID *string
	iMSenderID *string
	ingramOrderDate *string
	vendorNumber *string
	simulateStatus *string
	isIml *bool
	regionCode *string
}

// Your unique Ingram Micro customer number.
func (r ApiGetOrderdetailsV6Request) IMCustomerNumber(iMCustomerNumber string) ApiGetOrderdetailsV6Request {
	r.iMCustomerNumber = &iMCustomerNumber
	return r
}

// Two-character ISO country code.
func (r ApiGetOrderdetailsV6Request) IMCountryCode(iMCountryCode string) ApiGetOrderdetailsV6Request {
	r.iMCountryCode = &iMCountryCode
	return r
}

// Unique transaction number to identify each transaction accross all the systems.
func (r ApiGetOrderdetailsV6Request) IMCorrelationID(iMCorrelationID string) ApiGetOrderdetailsV6Request {
	r.iMCorrelationID = &iMCorrelationID
	return r
}

// Unique value used to identify the sender of the transaction. Example: MyCompany.
func (r ApiGetOrderdetailsV6Request) IMSenderID(iMSenderID string) ApiGetOrderdetailsV6Request {
	r.iMSenderID = &iMSenderID
	return r
}

// The date and time in UTC format that the order was created.
func (r ApiGetOrderdetailsV6Request) IngramOrderDate(ingramOrderDate string) ApiGetOrderdetailsV6Request {
	r.ingramOrderDate = &ingramOrderDate
	return r
}

// Vendor Number.
func (r ApiGetOrderdetailsV6Request) VendorNumber(vendorNumber string) ApiGetOrderdetailsV6Request {
	r.vendorNumber = &vendorNumber
	return r
}

// Order response for various order statuses. Not for use in production.
func (r ApiGetOrderdetailsV6Request) SimulateStatus(simulateStatus string) ApiGetOrderdetailsV6Request {
	r.simulateStatus = &simulateStatus
	return r
}

// True/False only for IML customers.
func (r ApiGetOrderdetailsV6Request) IsIml(isIml bool) ApiGetOrderdetailsV6Request {
	r.isIml = &isIml
	return r
}

// Region code for sandbox testing - Not for use in production.
func (r ApiGetOrderdetailsV6Request) RegionCode(regionCode string) ApiGetOrderdetailsV6Request {
	r.regionCode = &regionCode
	return r
}

func (r ApiGetOrderdetailsV6Request) Execute() (*OrderDetailResponse, *http.Response, error) {
	return r.ApiService.GetOrderdetailsV6Execute(r)
}

/*
GetOrderdetailsV6 Get Order Details v6

Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.

The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.

In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.

Use the "simulateStatus" query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ordernumber The Ingram Micro sales order number.
 @return ApiGetOrderdetailsV6Request
*/
func (a *OrdersV6APIService) GetOrderdetailsV6(ctx context.Context, ordernumber string) ApiGetOrderdetailsV6Request {
	return ApiGetOrderdetailsV6Request{
		ApiService: a,
		ctx: ctx,
		ordernumber: ordernumber,
	}
}

// Execute executes the request
//  @return OrderDetailResponse
func (a *OrdersV6APIService) GetOrderdetailsV6Execute(r ApiGetOrderdetailsV6Request) (*OrderDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersV6APIService.GetOrderdetailsV6")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resellers/v6/orders/{ordernumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"ordernumber"+"}", url.PathEscape(parameterValueToString(r.ordernumber, "ordernumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ordernumber) > 12 {
		return localVarReturnValue, nil, reportError("ordernumber must have less than 12 elements")
	}
	if r.iMCustomerNumber == nil {
		return localVarReturnValue, nil, reportError("iMCustomerNumber is required and must be specified")
	}
	if strlen(*r.iMCustomerNumber) > 10 {
		return localVarReturnValue, nil, reportError("iMCustomerNumber must have less than 10 elements")
	}
	if r.iMCountryCode == nil {
		return localVarReturnValue, nil, reportError("iMCountryCode is required and must be specified")
	}
	if strlen(*r.iMCountryCode) < 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have at least 2 elements")
	}
	if strlen(*r.iMCountryCode) > 2 {
		return localVarReturnValue, nil, reportError("iMCountryCode must have less than 2 elements")
	}
	if r.iMCorrelationID == nil {
		return localVarReturnValue, nil, reportError("iMCorrelationID is required and must be specified")
	}
	if strlen(*r.iMCorrelationID) > 32 {
		return localVarReturnValue, nil, reportError("iMCorrelationID must have less than 32 elements")
	}

	if r.ingramOrderDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ingramOrderDate", r.ingramOrderDate, "")
	}
	if r.vendorNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vendorNumber", r.vendorNumber, "")
	}
	if r.simulateStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "simulateStatus", r.simulateStatus, "")
	}
	if r.isIml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isIml", r.isIml, "")
	}
	if r.regionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "regionCode", r.regionCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CustomerNumber", r.iMCustomerNumber, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CountryCode", r.iMCountryCode, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-CorrelationID", r.iMCorrelationID, "")
	if r.iMSenderID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "IM-SenderID", r.iMSenderID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
